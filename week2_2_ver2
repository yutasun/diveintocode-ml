{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-50.  -49.9 -49.8 ...  49.8  49.9  50. ]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<function print>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "x =  np.arange(-50,50.1,0.1)\n",
    "x.shape\n",
    "y = x*1/2 + 1\n",
    "print(x)\n",
    "print"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       x        lat         lng  elevation  distance\n",
      "0      0  35.134141  139.132082       0.00         0\n",
      "1      1  35.135826  139.129202       0.00       322\n",
      "2      2  35.137510  139.126322       0.00       644\n",
      "3      3  35.139194  139.123441       0.00       966\n",
      "4      4  35.140878  139.120560       0.00      1288\n",
      "..   ...        ...         ...        ...       ...\n",
      "295  295  35.627957  138.277199    1918.24     95054\n",
      "296  296  35.629620  138.274284    1944.63     95376\n",
      "297  297  35.631284  138.271368    1973.99     95698\n",
      "298  298  35.632947  138.268452    1841.36     96020\n",
      "299  299  35.634610  138.265536    1725.80     96343\n",
      "\n",
      "[300 rows x 5 columns]\n"
     ]
    }
   ],
   "source": [
    "# データの読み込み\n",
    "import pandas as pd\n",
    "# csvの読み取り\n",
    "df= pd.read_csv('/Users/suzukiyuuta/Downloads/mtfuji_data.csv')\n",
    "print(df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 【問題1】データの可視化"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.00000000e+00, 3.51341410e+01, 1.39132082e+02, 0.00000000e+00,\n",
       "        0.00000000e+00],\n",
       "       [1.00000000e+00, 3.51358260e+01, 1.39129202e+02, 0.00000000e+00,\n",
       "        3.22000000e+02],\n",
       "       [2.00000000e+00, 3.51375100e+01, 1.39126322e+02, 0.00000000e+00,\n",
       "        6.44000000e+02],\n",
       "       ...,\n",
       "       [2.97000000e+02, 3.56312840e+01, 1.38271368e+02, 1.97399000e+03,\n",
       "        9.56980000e+04],\n",
       "       [2.98000000e+02, 3.56329470e+01, 1.38268452e+02, 1.84136000e+03,\n",
       "        9.60200000e+04],\n",
       "       [2.99000000e+02, 3.56346100e+01, 1.38265536e+02, 1.72580000e+03,\n",
       "        9.63430000e+04]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    " \n",
    "data = np.loadtxt(\"/Users/suzukiyuuta/Downloads/mtfuji_data.csv\",       # 読み込みたいファイルのパス\n",
    "                  delimiter=\",\",    # ファイルの区切り文字\n",
    "                  skiprows=1       # 先頭の何行を無視するか（指定した行数までは読み込まない）\n",
    "                 \n",
    "                 )\n",
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x11ac41110>]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "x = data[:, 0]\n",
    "y = data[:, 3]\n",
    "\n",
    "plt.title('Mt.Fuji')\n",
    "plt.xlabel('position')\n",
    "plt.ylabel('elevetion[m]')\n",
    "\n",
    "plt.plot(x, y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 【問題2】ある地点の勾配を計算する関数を作成"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def gradientfuji(p):\n",
    "    \n",
    "    delta_x = p - (p-1)\n",
    "    delta_y = y[p] - y[p-1]\n",
    "\n",
    "    grad = delta_y/delta_x\n",
    "\n",
    "    return grad"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def gradientFUJI(pos):\n",
    "    d_xr_ndarray = x[1:] - x[:-1] #Xの変化量\n",
    "    #print(d_xr_ndarray)\n",
    "    d_yr_ndarray = y[1:] - y[:-1] #Xの変化量\n",
    "    #print(d_yr_ndarray)\n",
    "\n",
    "    koubai_ndarray = d_yr_ndarray/d_xr_ndarray\n",
    "\n",
    "    #print(koubai_ndarray)\n",
    "    koubai_ndarray[pos]\n",
    "    return koubai_ndarray[pos]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-115.55999999999995"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gradientFUJI(298)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 【問題3】移動先の地点を計算する関数を作成"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "103.0"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def nextpos_FUJI(pos):\n",
    "    if pos < len(x):\n",
    "        n_pos = np.round(pos -0.2*gradientFUJI(pos))\n",
    "        if n_pos > len(x):\n",
    "            n_pos = len(x) - 2\n",
    "    else:\n",
    "        n_pos = len(x) - 2\n",
    "    return n_pos\n",
    "\n",
    "nextpos_FUJI(136)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 【問題4】山を下る関数を作成"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(74, [136, 103, 98, 95, 89, 86, 83, 80, 76, 74])"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def des_pos_FUJI(pos):\n",
    "    if pos > len(x) - 2:\n",
    "        print(\"スタート地点\" + str(pos) + \"は勾配データが存在しません。\")\n",
    "        m_list = [pos]\n",
    "        a = pos\n",
    "    else:\n",
    "        m_list = [pos]\n",
    "        a = int(nextpos_FUJI(pos))\n",
    "        m_list.append(a)\n",
    "        for i in range(1000):\n",
    "            next_position = int(nextpos_FUJI(m_list[-1]))\n",
    "            if next_position - m_list[-1] != 0:\n",
    "                if next_position < len(x) and next_position >= 0 :\n",
    "                    a = int(next_position)\n",
    "                    m_list.append(a)\n",
    "                elif next_position >= len(x):\n",
    "                    a = int(len(x))\n",
    "                    m_list.append(a)\n",
    "                    print(\"スタート地点\" + str(pos) + \"は移動先のデータが存在しないため作業を中止しました。\")\n",
    "                    break\n",
    "                elif next_position < 0:\n",
    "                    a = int(0)\n",
    "                    m_list.append(a)\n",
    "                    print(\"スタート地点\" + str(pos) + \"は移動先のデータが存在しないため作業を中止しました。\")\n",
    "                    break                    \n",
    "                else:\n",
    "                    print(\"予期せぬエラーが発生しました。システム管理者へ連絡ください。\")\n",
    "                    break\n",
    "            else:\n",
    "                break\n",
    "    return a,m_list\n",
    "\n",
    "des_pos_FUJI(136)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 【問題5】下山過程の可視化"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x11ccafd50>]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x = data[:, 0]\n",
    "y = data[:, 3]\n",
    "\n",
    "plt.title('Mt.Fuji')\n",
    "plt.xlabel('position')\n",
    "plt.ylabel('elevetion[m]')\n",
    "\n",
    "dis, gezan_x = des_pos_FUJI(136)\n",
    "gezan_y = y[gezan_x]\n",
    "\n",
    "plt.plot(x, y)\n",
    "plt.plot(gezan_x, gezan_y,color='red',marker=\"o\", markersize=5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 【問題6】初期値の変更\n",
    "初期値を他の全ての点で計算"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x11cd23ed0>]"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# １４２でテスト\n",
    "x = data[:, 0]\n",
    "y = data[:, 3]\n",
    "\n",
    "plt.title('Mt.Fuji')\n",
    "plt.xlabel('position')\n",
    "plt.ylabel('elevetion[m]')\n",
    "\n",
    "dis, gezan_x = des_pos_FUJI(142)\n",
    "gezan_y = y[gezan_x]\n",
    "\n",
    "plt.plot(x, y)\n",
    "plt.plot(gezan_x, gezan_y,color='red',marker=\"o\", markersize=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "スタート地点9は移動先のデータが存在しないため作業を中止しました。\n",
      "スタート地点10は移動先のデータが存在しないため作業を中止しました。\n",
      "スタート地点13は移動先のデータが存在しないため作業を中止しました。\n",
      "スタート地点15は移動先のデータが存在しないため作業を中止しました。\n",
      "スタート地点16は移動先のデータが存在しないため作業を中止しました。\n",
      "スタート地点19は移動先のデータが存在しないため作業を中止しました。\n",
      "スタート地点22は移動先のデータが存在しないため作業を中止しました。\n",
      "スタート地点25は移動先のデータが存在しないため作業を中止しました。\n",
      "スタート地点27は移動先のデータが存在しないため作業を中止しました。\n",
      "スタート地点28は移動先のデータが存在しないため作業を中止しました。\n",
      "スタート地点272は移動先のデータが存在しないため作業を中止しました。\n",
      "スタート地点280は移動先のデータが存在しないため作業を中止しました。\n",
      "スタート地点299は勾配データが存在しません。\n",
      "300\n",
      "300\n",
      "[0, 1, 2, 3, 4, 4, 6, 6, 0, 0, 0, 1, 3, 0, 40, 0, 0, 3, 40, 0, 40, 3, 0, 23, 42, 0, 40, 0, 0, 40, 40, 46, 40, 40, 42, 42, 42, 43, 38, 39, 40, 41, 42, 43, 44, 45, 46, 3, 48, 79, 40, 42, 73, 79, 73, 73, 42, 79, 58, 74, 79, 42, 73, 42, 74, 73, 73, 74, 42, 74, 74, 74, 74, 73, 74, 74, 74, 74, 74, 79, 74, 74, 79, 74, 74, 79, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 175, 175, 168, 176, 172, 176, 176, 176, 172, 176, 175, 168, 175, 176, 175, 176, 175, 172, 175, 175, 176, 175, 176, 176, 172, 168, 176, 168, 175, 176, 172, 175, 177, 177, 175, 176, 177, 176, 177, 179, 185, 185, 163, 168, 168, 183, 172, 163, 163, 163, 205, 204, 225, 205, 192, 193, 176, 176, 246, 230, 230, 230, 204, 230, 230, 185, 197, 204, 204, 238, 227, 172, 230, 163, 175, 246, 238, 204, 204, 246, 197, 205, 246, 197, 225, 197, 230, 238, 225, 205, 230, 248, 246, 205, 230, 246, 238, 227, 225, 227, 227, 238, 227, 238, 246, 225, 246, 204, 225, 227, 229, 230, 225, 238, 246, 229, 205, 298, 225, 230, 197, 225, 238, 246, 248, 246, 225, 238, 298, 229, 229, 298, 197, 229, 300, 229, 298, 197, 298, 246, 248, 298, 300, 298, 298, 246, 230, 225, 204, 248, 229, 230, 248, 298, 298, 298, 298, 229, 229, 298, 298, 299]\n"
     ]
    }
   ],
   "source": [
    "#全てのスタート地点で動作するか確認\n",
    "\n",
    "gezan_list = []\n",
    "destination_list = []\n",
    "\n",
    "for i in range(len(x)):\n",
    "    dis, gezan_x  = des_pos_FUJI(i)\n",
    "    gezan_list.append(gezan_x)\n",
    "    destination_list.append(dis)\n",
    "print(len(x))\n",
    "print(len(gezan_list))\n",
    "print(destination_list)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
