{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 【問題1】データセットの取得\n",
    "<br>\n",
    "pd.read_csv()を使用して、変数に格納"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['Id', 'MSSubClass', 'MSZoning', 'LotFrontage', 'LotArea', 'Street',\n",
      "       'Alley', 'LotShape', 'LandContour', 'Utilities', 'LotConfig',\n",
      "       'LandSlope', 'Neighborhood', 'Condition1', 'Condition2', 'BldgType',\n",
      "       'HouseStyle', 'OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd',\n",
      "       'RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType',\n",
      "       'MasVnrArea', 'ExterQual', 'ExterCond', 'Foundation', 'BsmtQual',\n",
      "       'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinSF1',\n",
      "       'BsmtFinType2', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'Heating',\n",
      "       'HeatingQC', 'CentralAir', 'Electrical', '1stFlrSF', '2ndFlrSF',\n",
      "       'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath',\n",
      "       'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'KitchenQual',\n",
      "       'TotRmsAbvGrd', 'Functional', 'Fireplaces', 'FireplaceQu', 'GarageType',\n",
      "       'GarageYrBlt', 'GarageFinish', 'GarageCars', 'GarageArea', 'GarageQual',\n",
      "       'GarageCond', 'PavedDrive', 'WoodDeckSF', 'OpenPorchSF',\n",
      "       'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'PoolQC',\n",
      "       'Fence', 'MiscFeature', 'MiscVal', 'MoSold', 'YrSold', 'SaleType',\n",
      "       'SaleCondition', 'SalePrice'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "df = pd.read_csv('/Users/suzukiyuuta/Downloads/train.csv')\n",
    "print(df.columns)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 【問題2】データセット自体の調査"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "trainデータに含まれるデータを元に住宅販売価格を予測するモデルを作成しTESTデータでIDごとの販売価格を計算し提出する。\n",
    "予測モデルについてはさまざま手法を検証することで各モデルの特徴運用またはヴィジュアルなデータ分析の練習を行う。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 【問題3】データの確認"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "各特徴量がどういったものかを見る。（数値データか文字データなど）"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Id<class 'numpy.int64'>\n",
      "MSSubClass<class 'numpy.int64'>\n",
      "MSZoning<class 'str'>\n",
      "LotFrontage<class 'numpy.float64'>\n",
      "LotArea<class 'numpy.int64'>\n",
      "Street<class 'str'>\n",
      "Alley<class 'float'>\n",
      "LotShape<class 'str'>\n",
      "LandContour<class 'str'>\n",
      "Utilities<class 'str'>\n",
      "LotConfig<class 'str'>\n",
      "LandSlope<class 'str'>\n",
      "Neighborhood<class 'str'>\n",
      "Condition1<class 'str'>\n",
      "Condition2<class 'str'>\n",
      "BldgType<class 'str'>\n",
      "HouseStyle<class 'str'>\n",
      "OverallQual<class 'numpy.int64'>\n",
      "OverallCond<class 'numpy.int64'>\n",
      "YearBuilt<class 'numpy.int64'>\n",
      "YearRemodAdd<class 'numpy.int64'>\n",
      "RoofStyle<class 'str'>\n",
      "RoofMatl<class 'str'>\n",
      "Exterior1st<class 'str'>\n",
      "Exterior2nd<class 'str'>\n",
      "MasVnrType<class 'str'>\n",
      "MasVnrArea<class 'numpy.float64'>\n",
      "ExterQual<class 'str'>\n",
      "ExterCond<class 'str'>\n",
      "Foundation<class 'str'>\n",
      "BsmtQual<class 'str'>\n",
      "BsmtCond<class 'str'>\n",
      "BsmtExposure<class 'str'>\n",
      "BsmtFinType1<class 'str'>\n",
      "BsmtFinSF1<class 'numpy.int64'>\n",
      "BsmtFinType2<class 'str'>\n",
      "BsmtFinSF2<class 'numpy.int64'>\n",
      "BsmtUnfSF<class 'numpy.int64'>\n",
      "TotalBsmtSF<class 'numpy.int64'>\n",
      "Heating<class 'str'>\n",
      "HeatingQC<class 'str'>\n",
      "CentralAir<class 'str'>\n",
      "Electrical<class 'str'>\n",
      "1stFlrSF<class 'numpy.int64'>\n",
      "2ndFlrSF<class 'numpy.int64'>\n",
      "LowQualFinSF<class 'numpy.int64'>\n",
      "GrLivArea<class 'numpy.int64'>\n",
      "BsmtFullBath<class 'numpy.int64'>\n",
      "BsmtHalfBath<class 'numpy.int64'>\n",
      "FullBath<class 'numpy.int64'>\n",
      "HalfBath<class 'numpy.int64'>\n",
      "BedroomAbvGr<class 'numpy.int64'>\n",
      "KitchenAbvGr<class 'numpy.int64'>\n",
      "KitchenQual<class 'str'>\n",
      "TotRmsAbvGrd<class 'numpy.int64'>\n",
      "Functional<class 'str'>\n",
      "Fireplaces<class 'numpy.int64'>\n",
      "FireplaceQu<class 'float'>\n",
      "GarageType<class 'str'>\n",
      "GarageYrBlt<class 'numpy.float64'>\n",
      "GarageFinish<class 'str'>\n",
      "GarageCars<class 'numpy.int64'>\n",
      "GarageArea<class 'numpy.int64'>\n",
      "GarageQual<class 'str'>\n",
      "GarageCond<class 'str'>\n",
      "PavedDrive<class 'str'>\n",
      "WoodDeckSF<class 'numpy.int64'>\n",
      "OpenPorchSF<class 'numpy.int64'>\n",
      "EnclosedPorch<class 'numpy.int64'>\n",
      "3SsnPorch<class 'numpy.int64'>\n",
      "ScreenPorch<class 'numpy.int64'>\n",
      "PoolArea<class 'numpy.int64'>\n",
      "PoolQC<class 'float'>\n",
      "Fence<class 'float'>\n",
      "MiscFeature<class 'float'>\n",
      "MiscVal<class 'numpy.int64'>\n",
      "MoSold<class 'numpy.int64'>\n",
      "YrSold<class 'numpy.int64'>\n",
      "SaleType<class 'str'>\n",
      "SaleCondition<class 'str'>\n",
      "SalePrice<class 'numpy.int64'>\n"
     ]
    }
   ],
   "source": [
    "print(type(df))\n",
    "df_columns = list(df.columns)\n",
    "for i in df_columns:\n",
    "    print(i + str(type(df.at[0,i])))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "今回の目的変数はどの列か確認する。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\"SalePrice\"が目的変数"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "特徴量の平均値と標準偏差、四分位数を一度に表示させる。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>MSSubClass</th>\n",
       "      <th>LotFrontage</th>\n",
       "      <th>LotArea</th>\n",
       "      <th>OverallQual</th>\n",
       "      <th>OverallCond</th>\n",
       "      <th>YearBuilt</th>\n",
       "      <th>YearRemodAdd</th>\n",
       "      <th>MasVnrArea</th>\n",
       "      <th>BsmtFinSF1</th>\n",
       "      <th>...</th>\n",
       "      <th>WoodDeckSF</th>\n",
       "      <th>OpenPorchSF</th>\n",
       "      <th>EnclosedPorch</th>\n",
       "      <th>3SsnPorch</th>\n",
       "      <th>ScreenPorch</th>\n",
       "      <th>PoolArea</th>\n",
       "      <th>MiscVal</th>\n",
       "      <th>MoSold</th>\n",
       "      <th>YrSold</th>\n",
       "      <th>SalePrice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>count</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1201.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1452.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>mean</td>\n",
       "      <td>730.500000</td>\n",
       "      <td>56.897260</td>\n",
       "      <td>70.049958</td>\n",
       "      <td>10516.828082</td>\n",
       "      <td>6.099315</td>\n",
       "      <td>5.575342</td>\n",
       "      <td>1971.267808</td>\n",
       "      <td>1984.865753</td>\n",
       "      <td>103.685262</td>\n",
       "      <td>443.639726</td>\n",
       "      <td>...</td>\n",
       "      <td>94.244521</td>\n",
       "      <td>46.660274</td>\n",
       "      <td>21.954110</td>\n",
       "      <td>3.409589</td>\n",
       "      <td>15.060959</td>\n",
       "      <td>2.758904</td>\n",
       "      <td>43.489041</td>\n",
       "      <td>6.321918</td>\n",
       "      <td>2007.815753</td>\n",
       "      <td>180921.195890</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>std</td>\n",
       "      <td>421.610009</td>\n",
       "      <td>42.300571</td>\n",
       "      <td>24.284752</td>\n",
       "      <td>9981.264932</td>\n",
       "      <td>1.382997</td>\n",
       "      <td>1.112799</td>\n",
       "      <td>30.202904</td>\n",
       "      <td>20.645407</td>\n",
       "      <td>181.066207</td>\n",
       "      <td>456.098091</td>\n",
       "      <td>...</td>\n",
       "      <td>125.338794</td>\n",
       "      <td>66.256028</td>\n",
       "      <td>61.119149</td>\n",
       "      <td>29.317331</td>\n",
       "      <td>55.757415</td>\n",
       "      <td>40.177307</td>\n",
       "      <td>496.123024</td>\n",
       "      <td>2.703626</td>\n",
       "      <td>1.328095</td>\n",
       "      <td>79442.502883</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>min</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>21.000000</td>\n",
       "      <td>1300.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1872.000000</td>\n",
       "      <td>1950.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2006.000000</td>\n",
       "      <td>34900.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25%</td>\n",
       "      <td>365.750000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>59.000000</td>\n",
       "      <td>7553.500000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1954.000000</td>\n",
       "      <td>1967.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>2007.000000</td>\n",
       "      <td>129975.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>50%</td>\n",
       "      <td>730.500000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>69.000000</td>\n",
       "      <td>9478.500000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1973.000000</td>\n",
       "      <td>1994.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>383.500000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>25.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>2008.000000</td>\n",
       "      <td>163000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>75%</td>\n",
       "      <td>1095.250000</td>\n",
       "      <td>70.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>11601.500000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>2000.000000</td>\n",
       "      <td>2004.000000</td>\n",
       "      <td>166.000000</td>\n",
       "      <td>712.250000</td>\n",
       "      <td>...</td>\n",
       "      <td>168.000000</td>\n",
       "      <td>68.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>2009.000000</td>\n",
       "      <td>214000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>max</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>190.000000</td>\n",
       "      <td>313.000000</td>\n",
       "      <td>215245.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>2010.000000</td>\n",
       "      <td>2010.000000</td>\n",
       "      <td>1600.000000</td>\n",
       "      <td>5644.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>857.000000</td>\n",
       "      <td>547.000000</td>\n",
       "      <td>552.000000</td>\n",
       "      <td>508.000000</td>\n",
       "      <td>480.000000</td>\n",
       "      <td>738.000000</td>\n",
       "      <td>15500.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>2010.000000</td>\n",
       "      <td>755000.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows × 38 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                Id   MSSubClass  LotFrontage        LotArea  OverallQual  \\\n",
       "count  1460.000000  1460.000000  1201.000000    1460.000000  1460.000000   \n",
       "mean    730.500000    56.897260    70.049958   10516.828082     6.099315   \n",
       "std     421.610009    42.300571    24.284752    9981.264932     1.382997   \n",
       "min       1.000000    20.000000    21.000000    1300.000000     1.000000   \n",
       "25%     365.750000    20.000000    59.000000    7553.500000     5.000000   \n",
       "50%     730.500000    50.000000    69.000000    9478.500000     6.000000   \n",
       "75%    1095.250000    70.000000    80.000000   11601.500000     7.000000   \n",
       "max    1460.000000   190.000000   313.000000  215245.000000    10.000000   \n",
       "\n",
       "       OverallCond    YearBuilt  YearRemodAdd   MasVnrArea   BsmtFinSF1  ...  \\\n",
       "count  1460.000000  1460.000000   1460.000000  1452.000000  1460.000000  ...   \n",
       "mean      5.575342  1971.267808   1984.865753   103.685262   443.639726  ...   \n",
       "std       1.112799    30.202904     20.645407   181.066207   456.098091  ...   \n",
       "min       1.000000  1872.000000   1950.000000     0.000000     0.000000  ...   \n",
       "25%       5.000000  1954.000000   1967.000000     0.000000     0.000000  ...   \n",
       "50%       5.000000  1973.000000   1994.000000     0.000000   383.500000  ...   \n",
       "75%       6.000000  2000.000000   2004.000000   166.000000   712.250000  ...   \n",
       "max       9.000000  2010.000000   2010.000000  1600.000000  5644.000000  ...   \n",
       "\n",
       "        WoodDeckSF  OpenPorchSF  EnclosedPorch    3SsnPorch  ScreenPorch  \\\n",
       "count  1460.000000  1460.000000    1460.000000  1460.000000  1460.000000   \n",
       "mean     94.244521    46.660274      21.954110     3.409589    15.060959   \n",
       "std     125.338794    66.256028      61.119149    29.317331    55.757415   \n",
       "min       0.000000     0.000000       0.000000     0.000000     0.000000   \n",
       "25%       0.000000     0.000000       0.000000     0.000000     0.000000   \n",
       "50%       0.000000    25.000000       0.000000     0.000000     0.000000   \n",
       "75%     168.000000    68.000000       0.000000     0.000000     0.000000   \n",
       "max     857.000000   547.000000     552.000000   508.000000   480.000000   \n",
       "\n",
       "          PoolArea       MiscVal       MoSold       YrSold      SalePrice  \n",
       "count  1460.000000   1460.000000  1460.000000  1460.000000    1460.000000  \n",
       "mean      2.758904     43.489041     6.321918  2007.815753  180921.195890  \n",
       "std      40.177307    496.123024     2.703626     1.328095   79442.502883  \n",
       "min       0.000000      0.000000     1.000000  2006.000000   34900.000000  \n",
       "25%       0.000000      0.000000     5.000000  2007.000000  129975.000000  \n",
       "50%       0.000000      0.000000     6.000000  2008.000000  163000.000000  \n",
       "75%       0.000000      0.000000     8.000000  2009.000000  214000.000000  \n",
       "max     738.000000  15500.000000    12.000000  2010.000000  755000.000000  \n",
       "\n",
       "[8 rows x 38 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 【問題4】欠損値への対応"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "■■■  Id\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:1460\n",
      "■■■  MSSubClass\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:15\n",
      "■■■  MSZoning\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:5\n",
      "■■■  LotFrontage\n",
      "NULL数:259　　　　NULL率:0.177    データの種類数:110\n",
      "■■■  LotArea\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:1073\n",
      "■■■  Street\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:2\n",
      "■■■  Alley\n",
      "NULL数:1369　　　　NULL率:0.938    データの種類数:2\n",
      "■■■  LotShape\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:4\n",
      "■■■  LandContour\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:4\n",
      "■■■  Utilities\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:2\n",
      "■■■  LotConfig\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:5\n",
      "■■■  LandSlope\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:3\n",
      "■■■  Neighborhood\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:25\n",
      "■■■  Condition1\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:9\n",
      "■■■  Condition2\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:8\n",
      "■■■  BldgType\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:5\n",
      "■■■  HouseStyle\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:8\n",
      "■■■  OverallQual\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:10\n",
      "■■■  OverallCond\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:9\n",
      "■■■  YearBuilt\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:112\n",
      "■■■  YearRemodAdd\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:61\n",
      "■■■  RoofStyle\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:6\n",
      "■■■  RoofMatl\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:8\n",
      "■■■  Exterior1st\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:15\n",
      "■■■  Exterior2nd\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:16\n",
      "■■■  MasVnrType\n",
      "NULL数:8　　　　NULL率:0.005    データの種類数:4\n",
      "■■■  MasVnrArea\n",
      "NULL数:8　　　　NULL率:0.005    データの種類数:327\n",
      "■■■  ExterQual\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:4\n",
      "■■■  ExterCond\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:5\n",
      "■■■  Foundation\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:6\n",
      "■■■  BsmtQual\n",
      "NULL数:37　　　　NULL率:0.025    データの種類数:4\n",
      "■■■  BsmtCond\n",
      "NULL数:37　　　　NULL率:0.025    データの種類数:4\n",
      "■■■  BsmtExposure\n",
      "NULL数:38　　　　NULL率:0.026    データの種類数:4\n",
      "■■■  BsmtFinType1\n",
      "NULL数:37　　　　NULL率:0.025    データの種類数:6\n",
      "■■■  BsmtFinSF1\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:637\n",
      "■■■  BsmtFinType2\n",
      "NULL数:38　　　　NULL率:0.026    データの種類数:6\n",
      "■■■  BsmtFinSF2\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:144\n",
      "■■■  BsmtUnfSF\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:780\n",
      "■■■  TotalBsmtSF\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:721\n",
      "■■■  Heating\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:6\n",
      "■■■  HeatingQC\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:5\n",
      "■■■  CentralAir\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:2\n",
      "■■■  Electrical\n",
      "NULL数:1　　　　NULL率:0.001    データの種類数:5\n",
      "■■■  1stFlrSF\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:753\n",
      "■■■  2ndFlrSF\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:417\n",
      "■■■  LowQualFinSF\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:24\n",
      "■■■  GrLivArea\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:861\n",
      "■■■  BsmtFullBath\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:4\n",
      "■■■  BsmtHalfBath\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:3\n",
      "■■■  FullBath\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:4\n",
      "■■■  HalfBath\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:3\n",
      "■■■  BedroomAbvGr\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:8\n",
      "■■■  KitchenAbvGr\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:4\n",
      "■■■  KitchenQual\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:4\n",
      "■■■  TotRmsAbvGrd\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:12\n",
      "■■■  Functional\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:7\n",
      "■■■  Fireplaces\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:4\n",
      "■■■  FireplaceQu\n",
      "NULL数:690　　　　NULL率:0.473    データの種類数:5\n",
      "■■■  GarageType\n",
      "NULL数:81　　　　NULL率:0.055    データの種類数:6\n",
      "■■■  GarageYrBlt\n",
      "NULL数:81　　　　NULL率:0.055    データの種類数:97\n",
      "■■■  GarageFinish\n",
      "NULL数:81　　　　NULL率:0.055    データの種類数:3\n",
      "■■■  GarageCars\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:5\n",
      "■■■  GarageArea\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:441\n",
      "■■■  GarageQual\n",
      "NULL数:81　　　　NULL率:0.055    データの種類数:5\n",
      "■■■  GarageCond\n",
      "NULL数:81　　　　NULL率:0.055    データの種類数:5\n",
      "■■■  PavedDrive\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:3\n",
      "■■■  WoodDeckSF\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:274\n",
      "■■■  OpenPorchSF\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:202\n",
      "■■■  EnclosedPorch\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:120\n",
      "■■■  3SsnPorch\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:20\n",
      "■■■  ScreenPorch\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:76\n",
      "■■■  PoolArea\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:8\n",
      "■■■  PoolQC\n",
      "NULL数:1453　　　　NULL率:0.995    データの種類数:3\n",
      "■■■  Fence\n",
      "NULL数:1179　　　　NULL率:0.808    データの種類数:4\n",
      "■■■  MiscFeature\n",
      "NULL数:1406　　　　NULL率:0.963    データの種類数:4\n",
      "■■■  MiscVal\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:21\n",
      "■■■  MoSold\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:12\n",
      "■■■  YrSold\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:5\n",
      "■■■  SaleType\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:9\n",
      "■■■  SaleCondition\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:6\n",
      "■■■  SalePrice\n",
      "NULL数:0　　　　NULL率:0.0    データの種類数:663\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd #欠損値が何パーセント含まれるかを確認する。\n",
    "import numpy as np\n",
    "from quilt.data.ResidentMario import missingno_data\n",
    "collisions = missingno_data.nyc_collision_factors()\n",
    "collisions = collisions.replace(\"nan\", np.nan)\n",
    "def null_search(df_train):\n",
    "    for i in df_train.columns:\n",
    "        print(\"■■■  \" + i )\n",
    "        print(\"NULL数:\" + str(df_train[i].isnull().sum() )+\n",
    "                 \"　　　　NULL率:\" + str((df_train[i].isnull().sum()/len(df_train)).round(3)) +\n",
    "                 \"    データの種類数:\" + str(df_train[i].value_counts().count()))\n",
    "null_search(df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "5つ以上欠損値がある特徴量（列）は削除する。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "        Id  MSSubClass MSZoning  LotArea Street LotShape LandContour  \\\n",
      "0        1          60       RL     8450   Pave      Reg         Lvl   \n",
      "1        2          20       RL     9600   Pave      Reg         Lvl   \n",
      "2        3          60       RL    11250   Pave      IR1         Lvl   \n",
      "3        4          70       RL     9550   Pave      IR1         Lvl   \n",
      "4        5          60       RL    14260   Pave      IR1         Lvl   \n",
      "...    ...         ...      ...      ...    ...      ...         ...   \n",
      "1455  1456          60       RL     7917   Pave      Reg         Lvl   \n",
      "1456  1457          20       RL    13175   Pave      Reg         Lvl   \n",
      "1457  1458          70       RL     9042   Pave      Reg         Lvl   \n",
      "1458  1459          20       RL     9717   Pave      Reg         Lvl   \n",
      "1459  1460          20       RL     9937   Pave      Reg         Lvl   \n",
      "\n",
      "     Utilities LotConfig LandSlope  ... EnclosedPorch 3SsnPorch ScreenPorch  \\\n",
      "0       AllPub    Inside       Gtl  ...             0         0           0   \n",
      "1       AllPub       FR2       Gtl  ...             0         0           0   \n",
      "2       AllPub    Inside       Gtl  ...             0         0           0   \n",
      "3       AllPub    Corner       Gtl  ...           272         0           0   \n",
      "4       AllPub       FR2       Gtl  ...             0         0           0   \n",
      "...        ...       ...       ...  ...           ...       ...         ...   \n",
      "1455    AllPub    Inside       Gtl  ...             0         0           0   \n",
      "1456    AllPub    Inside       Gtl  ...             0         0           0   \n",
      "1457    AllPub    Inside       Gtl  ...             0         0           0   \n",
      "1458    AllPub    Inside       Gtl  ...           112         0           0   \n",
      "1459    AllPub    Inside       Gtl  ...             0         0           0   \n",
      "\n",
      "     PoolArea MiscVal  MoSold  YrSold  SaleType  SaleCondition SalePrice  \n",
      "0           0       0       2    2008        WD         Normal    208500  \n",
      "1           0       0       5    2007        WD         Normal    181500  \n",
      "2           0       0       9    2008        WD         Normal    223500  \n",
      "3           0       0       2    2006        WD        Abnorml    140000  \n",
      "4           0       0      12    2008        WD         Normal    250000  \n",
      "...       ...     ...     ...     ...       ...            ...       ...  \n",
      "1455        0       0       8    2007        WD         Normal    175000  \n",
      "1456        0       0       2    2010        WD         Normal    210000  \n",
      "1457        0    2500       5    2010        WD         Normal    266500  \n",
      "1458        0       0       4    2010        WD         Normal    142125  \n",
      "1459        0       0       6    2008        WD         Normal    147500  \n",
      "\n",
      "[1460 rows x 63 columns]\n"
     ]
    }
   ],
   "source": [
    "def null_red1(df_train):\n",
    "    for i in df_train.columns:\n",
    "        if df_train[i].isnull().sum() >= 5:\n",
    "            df_train = df_train.drop(i, axis=1)\n",
    "    return df_train\n",
    "df = null_red1(df)\n",
    "print(df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "欠損値があるサンプル（行）は削除する。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "        Id MSSubClass MSZoning LotArea Street LotShape LandContour Utilities  \\\n",
      "0        1         60       RL    8450   Pave      Reg         Lvl    AllPub   \n",
      "1        2         20       RL    9600   Pave      Reg         Lvl    AllPub   \n",
      "2        3         60       RL   11250   Pave      IR1         Lvl    AllPub   \n",
      "3        4         70       RL    9550   Pave      IR1         Lvl    AllPub   \n",
      "4        5         60       RL   14260   Pave      IR1         Lvl    AllPub   \n",
      "...    ...        ...      ...     ...    ...      ...         ...       ...   \n",
      "1455  1456         60       RL    7917   Pave      Reg         Lvl    AllPub   \n",
      "1456  1457         20       RL   13175   Pave      Reg         Lvl    AllPub   \n",
      "1457  1458         70       RL    9042   Pave      Reg         Lvl    AllPub   \n",
      "1458  1459         20       RL    9717   Pave      Reg         Lvl    AllPub   \n",
      "1459  1460         20       RL    9937   Pave      Reg         Lvl    AllPub   \n",
      "\n",
      "     LotConfig LandSlope  ... EnclosedPorch 3SsnPorch ScreenPorch PoolArea  \\\n",
      "0       Inside       Gtl  ...             0         0           0        0   \n",
      "1          FR2       Gtl  ...             0         0           0        0   \n",
      "2       Inside       Gtl  ...             0         0           0        0   \n",
      "3       Corner       Gtl  ...           272         0           0        0   \n",
      "4          FR2       Gtl  ...             0         0           0        0   \n",
      "...        ...       ...  ...           ...       ...         ...      ...   \n",
      "1455    Inside       Gtl  ...             0         0           0        0   \n",
      "1456    Inside       Gtl  ...             0         0           0        0   \n",
      "1457    Inside       Gtl  ...             0         0           0        0   \n",
      "1458    Inside       Gtl  ...           112         0           0        0   \n",
      "1459    Inside       Gtl  ...             0         0           0        0   \n",
      "\n",
      "     MiscVal MoSold YrSold SaleType SaleCondition SalePrice  \n",
      "0          0      2   2008       WD        Normal    208500  \n",
      "1          0      5   2007       WD        Normal    181500  \n",
      "2          0      9   2008       WD        Normal    223500  \n",
      "3          0      2   2006       WD       Abnorml    140000  \n",
      "4          0     12   2008       WD        Normal    250000  \n",
      "...      ...    ...    ...      ...           ...       ...  \n",
      "1455       0      8   2007       WD        Normal    175000  \n",
      "1456       0      2   2010       WD        Normal    210000  \n",
      "1457    2500      5   2010       WD        Normal    266500  \n",
      "1458       0      4   2010       WD        Normal    142125  \n",
      "1459       0      6   2008       WD        Normal    147500  \n",
      "\n",
      "[1459 rows x 63 columns]\n"
     ]
    }
   ],
   "source": [
    "# df_tes = []\n",
    "\n",
    "# if df.iloc[100].isnull().sum() > 0:\n",
    "#     df_tes = df.iloc[100]\n",
    "# else:\n",
    "#     pass\n",
    "# print(df_tes)\n",
    "# type(df.iloc[1].isnull().sum())\n",
    "\n",
    "df_c = df.columns\n",
    "df_c\n",
    "\n",
    "df_tes = pd.DataFrame(columns=df_c)\n",
    "df_tes\n",
    "\n",
    "# print(len(df))\n",
    "\n",
    "# print(df.shape)\n",
    "# print(df.iloc[0:1].shape)\n",
    "\n",
    "# df_x = pd.DataFrame(columns=df_c)\n",
    "# df_x = pd.concat([df_x, df.iloc[3:4]])\n",
    "\n",
    "# print(df_x)               \n",
    "def null_red0(df_train1):\n",
    "    df_tes = pd.DataFrame(columns=df_c)\n",
    "    for i in range(len(df_train1)):\n",
    "        if df_train1.iloc[i].isnull().sum() == 0:\n",
    "            df_tes = pd.concat([df_tes, df_train1.iloc[i:i+1]])\n",
    "        else:\n",
    "            pass\n",
    "    return df_tes\n",
    "df = null_red0(df)\n",
    "print(df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 【問題5】用語の調査"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "尖度:正規分布に対して裾野広がり具合を表す尺度（歪度＝０は正規分布であるための必要条件）\n",
    "<br>\n",
    "歪度:正規分布に対して左右の非対称性を表す尺度（尖度＝０は正規分布であるための必要条件）"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 【問題6】分布の確認"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "seabornのsns.distplot()を使い目的変数の分布を表示し、「尖度」と「歪度」も算出する。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "count      1460.000000\n",
      "mean     180921.195890\n",
      "std       79442.502883\n",
      "min       34900.000000\n",
      "25%      129975.000000\n",
      "50%      163000.000000\n",
      "75%      214000.000000\n",
      "max      755000.000000\n",
      "Name: SalePrice, dtype: float64\n",
      "Skewness : 1.8828757597682129\n",
      "Kurtosis : 6.536281860064529\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "print(df.SalePrice.describe())\n",
    "\n",
    "print(\"Skewness :\", df.SalePrice.skew())\n",
    "print(\"Kurtosis :\", df.SalePrice.kurt())\n",
    "\n",
    "# 以下サンプル\n",
    "# def null_skew(df_skew):\n",
    "#     for i in df_skew.columns:\n",
    "#         print(\"Skewness :\", df[i].skew())\n",
    "# null_skew(df['SalePrice'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "目的変数に対して対数変換を行う。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[208500. 181500. 223500. ... 266500. 142125. 147500.]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([12.247694, 12.109011, 12.317166, ..., 12.49313 , 11.864462,\n",
       "       11.901584], dtype=float32)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# print(type(df))\n",
    "# df_columns = list(df.columns)\n",
    "# for i in df_columns:\n",
    "#     print(i + str(type(df.at[0,i])))\n",
    "\n",
    "df_y = df.SalePrice.values\n",
    "df_y = df_y.astype(np.float32)\n",
    "log_df_y = pd.DataFrame(np.log(df_y))\n",
    "\n",
    "print(df_y)\n",
    "np.log(df_y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "対数変換したものに対して分布を表示し、「尖度」と「歪度」も算出する"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Skewness : 0    0.121335\n",
      "dtype: float32\n",
      "Kurtosis : 0    0.809532\n",
      "dtype: float32\n"
     ]
    }
   ],
   "source": [
    "print(\"Skewness :\", log_df_y.skew())\n",
    "print(\"Kurtosis :\", log_df_y.kurt())\n",
    "\n",
    "# log_df_y = pd.DataFrame(log_df_y,columns = ['SalePrice_log'])\n",
    "# print(log_df_y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "対数変換することで正規分布に近づけた"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 【問題7】相関係数の確認"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "相関係数行列のヒートマップを作り、相関係数の高い関係を見つける。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                     Id  MSSubClass   LotArea  OverallQual  OverallCond  \\\n",
      "Id             1.000000    0.011156 -0.033226    -0.028365     0.012609   \n",
      "MSSubClass     0.011156    1.000000 -0.139781     0.032628    -0.059316   \n",
      "LotArea       -0.033226   -0.139781  1.000000     0.105806    -0.005636   \n",
      "OverallQual   -0.028365    0.032628  0.105806     1.000000    -0.091932   \n",
      "OverallCond    0.012609   -0.059316 -0.005636    -0.091932     1.000000   \n",
      "YearBuilt     -0.012713    0.027850  0.014228     0.572323    -0.375983   \n",
      "YearRemodAdd  -0.021998    0.040581  0.013788     0.550684     0.073741   \n",
      "BsmtFinSF1    -0.005024   -0.069836  0.214103     0.239666    -0.046231   \n",
      "BsmtFinSF2    -0.005968   -0.065649  0.111170    -0.059119     0.040229   \n",
      "BsmtUnfSF     -0.007940   -0.140759 -0.002618     0.308159    -0.136841   \n",
      "TotalBsmtSF   -0.015415   -0.238518  0.260833     0.537808    -0.171098   \n",
      "1stFlrSF       0.010496   -0.251758  0.299475     0.476224    -0.144203   \n",
      "2ndFlrSF       0.005590    0.307886  0.050986     0.295493     0.028942   \n",
      "LowQualFinSF  -0.044230    0.046474  0.004779    -0.030429     0.025494   \n",
      "GrLivArea      0.008273    0.074853  0.263116     0.593007    -0.079686   \n",
      "BsmtFullBath   0.002289    0.003491  0.158155     0.111098    -0.054942   \n",
      "BsmtHalfBath  -0.020155   -0.002333  0.048046    -0.040150     0.117821   \n",
      "FullBath       0.005587    0.131608  0.126031     0.550600    -0.194149   \n",
      "HalfBath       0.006784    0.177354  0.014259     0.273458    -0.060769   \n",
      "BedroomAbvGr   0.037719   -0.023438  0.119690     0.101676     0.012980   \n",
      "KitchenAbvGr   0.002951    0.281721 -0.017784    -0.183882    -0.087001   \n",
      "TotRmsAbvGrd   0.027239    0.040380  0.190015     0.427452    -0.057583   \n",
      "Fireplaces    -0.019772   -0.045569  0.271364     0.396765    -0.023820   \n",
      "GarageCars     0.016570   -0.040110  0.154871     0.600671    -0.185758   \n",
      "GarageArea     0.017634   -0.098672  0.180403     0.562022    -0.151521   \n",
      "WoodDeckSF    -0.029643   -0.012579  0.171698     0.238923    -0.003334   \n",
      "OpenPorchSF   -0.000477   -0.006100  0.084774     0.308819    -0.032589   \n",
      "EnclosedPorch  0.002889   -0.012037 -0.018340    -0.113937     0.070356   \n",
      "3SsnPorch     -0.046635   -0.043825  0.020423     0.030371     0.025504   \n",
      "ScreenPorch    0.001330   -0.026030  0.043160     0.064886     0.054811   \n",
      "PoolArea       0.057044    0.008283  0.077672     0.065166    -0.001985   \n",
      "MiscVal       -0.006242   -0.007683  0.038068    -0.031406     0.068777   \n",
      "MoSold         0.021172   -0.013585  0.001205     0.070815    -0.003511   \n",
      "YrSold         0.000712   -0.021407 -0.014261    -0.027347     0.043950   \n",
      "SalePrice     -0.021917   -0.084284  0.263843     0.790982    -0.077856   \n",
      "\n",
      "               YearBuilt  YearRemodAdd  BsmtFinSF1  BsmtFinSF2  BsmtUnfSF  \\\n",
      "Id             -0.012713     -0.021998   -0.005024   -0.005968  -0.007940   \n",
      "MSSubClass      0.027850      0.040581   -0.069836   -0.065649  -0.140759   \n",
      "LotArea         0.014228      0.013788    0.214103    0.111170  -0.002618   \n",
      "OverallQual     0.572323      0.550684    0.239666   -0.059119   0.308159   \n",
      "OverallCond    -0.375983      0.073741   -0.046231    0.040229  -0.136841   \n",
      "YearBuilt       1.000000      0.592855    0.249503   -0.049107   0.149040   \n",
      "YearRemodAdd    0.592855      1.000000    0.128451   -0.067759   0.181133   \n",
      "BsmtFinSF1      0.249503      0.128451    1.000000   -0.050117  -0.495251   \n",
      "BsmtFinSF2     -0.049107     -0.067759   -0.050117    1.000000  -0.209294   \n",
      "BsmtUnfSF       0.149040      0.181133   -0.495251   -0.209294   1.000000   \n",
      "TotalBsmtSF     0.391452      0.291066    0.522396    0.104810   0.415360   \n",
      "1stFlrSF        0.281986      0.240379    0.445863    0.097117   0.317987   \n",
      "2ndFlrSF        0.010308      0.140024   -0.137079   -0.099260   0.004469   \n",
      "LowQualFinSF   -0.183784     -0.062419   -0.064503    0.014807   0.028167   \n",
      "GrLivArea       0.199010      0.287389    0.208171   -0.009640   0.240257   \n",
      "BsmtFullBath    0.187599      0.119470    0.649212    0.158678  -0.422900   \n",
      "BsmtHalfBath   -0.038162     -0.012337    0.067418    0.070948  -0.095804   \n",
      "FullBath        0.468271      0.439046    0.058543   -0.076444   0.288886   \n",
      "HalfBath        0.242656      0.183331    0.004262   -0.032148  -0.041118   \n",
      "BedroomAbvGr   -0.070651     -0.040581   -0.107355   -0.015728   0.166643   \n",
      "KitchenAbvGr   -0.174800     -0.149598   -0.081007   -0.040751   0.030086   \n",
      "TotRmsAbvGrd    0.095589      0.191740    0.044316   -0.035227   0.250647   \n",
      "Fireplaces      0.147716      0.112581    0.260011    0.046921   0.051575   \n",
      "GarageCars      0.537850      0.420622    0.224054   -0.038264   0.214175   \n",
      "GarageArea      0.478954      0.371600    0.296970   -0.018227   0.183303   \n",
      "WoodDeckSF      0.224880      0.205726    0.204306    0.067898  -0.005316   \n",
      "OpenPorchSF     0.188686      0.226298    0.111761    0.003093   0.129005   \n",
      "EnclosedPorch  -0.387268     -0.193919   -0.102303    0.036543  -0.002538   \n",
      "3SsnPorch       0.031355      0.045286    0.026451   -0.029993   0.020764   \n",
      "ScreenPorch    -0.050364     -0.038740    0.062021    0.088871  -0.012579   \n",
      "PoolArea        0.004950      0.005829    0.140491    0.041709  -0.035092   \n",
      "MiscVal        -0.034383     -0.010286    0.003571    0.004940  -0.023837   \n",
      "MoSold          0.012398      0.021490   -0.015727   -0.015211   0.034888   \n",
      "YrSold         -0.013618      0.035743    0.014359    0.031706  -0.041258   \n",
      "SalePrice       0.522897      0.507101    0.386420   -0.011378   0.214479   \n",
      "\n",
      "               ...  WoodDeckSF  OpenPorchSF  EnclosedPorch  3SsnPorch  \\\n",
      "Id             ...   -0.029643    -0.000477       0.002889  -0.046635   \n",
      "MSSubClass     ...   -0.012579    -0.006100      -0.012037  -0.043825   \n",
      "LotArea        ...    0.171698     0.084774      -0.018340   0.020423   \n",
      "OverallQual    ...    0.238923     0.308819      -0.113937   0.030371   \n",
      "OverallCond    ...   -0.003334    -0.032589       0.070356   0.025504   \n",
      "YearBuilt      ...    0.224880     0.188686      -0.387268   0.031355   \n",
      "YearRemodAdd   ...    0.205726     0.226298      -0.193919   0.045286   \n",
      "BsmtFinSF1     ...    0.204306     0.111761      -0.102303   0.026451   \n",
      "BsmtFinSF2     ...    0.067898     0.003093       0.036543  -0.029993   \n",
      "BsmtUnfSF      ...   -0.005316     0.129005      -0.002538   0.020764   \n",
      "TotalBsmtSF    ...    0.232019     0.247264      -0.095478   0.037384   \n",
      "1stFlrSF       ...    0.235459     0.211671      -0.065292   0.056104   \n",
      "2ndFlrSF       ...    0.092165     0.208026       0.061989  -0.024358   \n",
      "LowQualFinSF   ...   -0.025444     0.018251       0.061081  -0.004296   \n",
      "GrLivArea      ...    0.247433     0.330224       0.009113   0.020643   \n",
      "BsmtFullBath   ...    0.175315     0.067341      -0.049911  -0.000106   \n",
      "BsmtHalfBath   ...    0.040161    -0.025324      -0.008555   0.035114   \n",
      "FullBath       ...    0.187703     0.259977      -0.115093   0.035353   \n",
      "HalfBath       ...    0.108080     0.199740      -0.095317  -0.004972   \n",
      "BedroomAbvGr   ...    0.046854     0.093810       0.041570  -0.024478   \n",
      "KitchenAbvGr   ...   -0.090130    -0.070091       0.037312  -0.024600   \n",
      "TotRmsAbvGrd   ...    0.165984     0.234192       0.004151  -0.006683   \n",
      "Fireplaces     ...    0.200019     0.169405      -0.024822   0.011257   \n",
      "GarageCars     ...    0.226342     0.213569      -0.151434   0.035765   \n",
      "GarageArea     ...    0.224666     0.241435      -0.121777   0.035087   \n",
      "WoodDeckSF     ...    1.000000     0.058661      -0.125989  -0.032771   \n",
      "OpenPorchSF    ...    0.058661     1.000000      -0.093079  -0.005842   \n",
      "EnclosedPorch  ...   -0.125989    -0.093079       1.000000  -0.037305   \n",
      "3SsnPorch      ...   -0.032771    -0.005842      -0.037305   1.000000   \n",
      "ScreenPorch    ...   -0.074181     0.074304      -0.082864  -0.031436   \n",
      "PoolArea       ...    0.073378     0.060762       0.054203  -0.007992   \n",
      "MiscVal        ...   -0.009551    -0.018584       0.018361   0.000354   \n",
      "MoSold         ...    0.021011     0.071255      -0.028887   0.029474   \n",
      "YrSold         ...    0.022270    -0.057619      -0.009916   0.018645   \n",
      "SalePrice      ...    0.324413     0.315856      -0.128578   0.044584   \n",
      "\n",
      "               ScreenPorch  PoolArea   MiscVal    MoSold    YrSold  SalePrice  \n",
      "Id                0.001330  0.057044 -0.006242  0.021172  0.000712  -0.021917  \n",
      "MSSubClass       -0.026030  0.008283 -0.007683 -0.013585 -0.021407  -0.084284  \n",
      "LotArea           0.043160  0.077672  0.038068  0.001205 -0.014261   0.263843  \n",
      "OverallQual       0.064886  0.065166 -0.031406  0.070815 -0.027347   0.790982  \n",
      "OverallCond       0.054811 -0.001985  0.068777 -0.003511  0.043950  -0.077856  \n",
      "YearBuilt        -0.050364  0.004950 -0.034383  0.012398 -0.013618   0.522897  \n",
      "YearRemodAdd     -0.038740  0.005829 -0.010286  0.021490  0.035743   0.507101  \n",
      "BsmtFinSF1        0.062021  0.140491  0.003571 -0.015727  0.014359   0.386420  \n",
      "BsmtFinSF2        0.088871  0.041709  0.004940 -0.015211  0.031706  -0.011378  \n",
      "BsmtUnfSF        -0.012579 -0.035092 -0.023837  0.034888 -0.041258   0.214479  \n",
      "TotalBsmtSF       0.084489  0.126053 -0.018479  0.013196 -0.014969   0.613581  \n",
      "1stFlrSF          0.088758  0.131525 -0.021096  0.031372 -0.013604   0.605852  \n",
      "2ndFlrSF          0.040606  0.081487  0.016197  0.035164 -0.028700   0.319334  \n",
      "LowQualFinSF      0.026799  0.062157 -0.003793 -0.022174 -0.028921  -0.025606  \n",
      "GrLivArea         0.101510  0.170205 -0.002416  0.050240 -0.036526   0.708624  \n",
      "BsmtFullBath      0.023148  0.067616 -0.023047 -0.025361  0.067049   0.227122  \n",
      "BsmtHalfBath      0.032121  0.020025 -0.007367  0.032873 -0.046524  -0.016844  \n",
      "FullBath         -0.008106  0.049604 -0.014290  0.055872 -0.019669   0.560664  \n",
      "HalfBath          0.072426  0.022381  0.001290 -0.009050 -0.010269   0.284108  \n",
      "BedroomAbvGr      0.044300  0.070703  0.007767  0.046544 -0.036014   0.168213  \n",
      "KitchenAbvGr     -0.051613 -0.014525  0.062341  0.026589  0.031687  -0.135907  \n",
      "TotRmsAbvGrd      0.059383  0.083757  0.024763  0.036907 -0.034516   0.533723  \n",
      "Fireplaces        0.184530  0.095074  0.001409  0.046357 -0.024096   0.466929  \n",
      "GarageCars        0.050494  0.020934 -0.043080  0.040522 -0.039117   0.640409  \n",
      "GarageArea        0.051412  0.061047 -0.027400  0.027974 -0.027378   0.623431  \n",
      "WoodDeckSF       -0.074181  0.073378 -0.009551  0.021011  0.022270   0.324413  \n",
      "OpenPorchSF       0.074304  0.060762 -0.018584  0.071255 -0.057619   0.315856  \n",
      "EnclosedPorch    -0.082864  0.054203  0.018361 -0.028887 -0.009916  -0.128578  \n",
      "3SsnPorch        -0.031436 -0.007992  0.000354  0.029474  0.018645   0.044584  \n",
      "ScreenPorch       1.000000  0.051307  0.031946  0.023217  0.010694   0.111447  \n",
      "PoolArea          0.051307  1.000000  0.029669 -0.033737 -0.059689   0.092404  \n",
      "MiscVal           0.031946  0.029669  1.000000 -0.006495  0.004906  -0.021190  \n",
      "MoSold            0.023217 -0.033737 -0.006495  1.000000 -0.145721   0.046432  \n",
      "YrSold            0.010694 -0.059689  0.004906 -0.145721  1.000000  -0.028923  \n",
      "SalePrice         0.111447  0.092404 -0.021190  0.046432 -0.028923   1.000000  \n",
      "\n",
      "[35 rows x 35 columns]\n"
     ]
    }
   ],
   "source": [
    "# type(df.at[0,i]) is str\n",
    "\n",
    "# 文字列を削除\n",
    "def str_red(df_train):\n",
    "    for i in df_train.columns:\n",
    "        if type(df_train.at[0,i]) is str:\n",
    "            df_train = df_train.drop(i, axis=1)\n",
    "    return df_train\n",
    "df_correlation = str_red(df)\n",
    "\n",
    "sns.heatmap(df.corr(method='pearson'),\n",
    "            vmin=0.6,\n",
    "            vmax=1.0,\n",
    "            center=0,\n",
    "#             annot=True, # True:格子の中に値を表示\n",
    "#             fmt='.1f',\n",
    "#             xticklabels=df.corr(method='pearson').columns.values,\n",
    "#             yticklabels=df.corr(method='pearson').columns.values\n",
    "           )\n",
    "plt.show()\n",
    "df_final0 = df.corr(method='pearson')\n",
    "print(df_final0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "目的変数との相関の高い特徴量10個を選び、これらだけの相関係数行列ヒートマップを作る。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_correlation = df.corr(method='pearson')\n",
    "df_correlation.loc[\"SalePrice\"]\n",
    "df_correlation.sort_values('SalePrice', ascending=False)\n",
    "df_correlation10 = df_correlation.loc\\\n",
    "[['OverallQual','GrLivArea','GarageCars','GarageArea','TotalBsmtSF','1stFlrSF','FullBath','TotRmsAbvGrd','YearBuilt','YearRemodAdd'],\\\n",
    "['OverallQual','GrLivArea','GarageCars','GarageArea','TotalBsmtSF','1stFlrSF','FullBath','TotRmsAbvGrd','YearBuilt','YearRemodAdd']]\n",
    "\n",
    "# print(df_correlation10)\n",
    "\n",
    "# df_correlation10 = str_red(df)\n",
    "\n",
    "sns.heatmap(df_correlation10.corr(method='pearson'),\n",
    "            vmin=0.5,\n",
    "            vmax=1.0,\n",
    "            center=0,\n",
    "#             annot=True, # True:格子の中に値を表示\n",
    "#             fmt='.1f',\n",
    "#             xticklabels=df.corr(method='pearson').columns.values,\n",
    "#             yticklabels=df.corr(method='pearson').columns.values\n",
    "           )\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "選んだ10個の特徴量が何か表しているかをKaggleのDataDescriptionの記述を参考に日本語でまとめる。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "'OverallQual'\n",
    " 全体的な素材と仕上げの品質について１０段階評価\n",
    "'GrLivArea'\n",
    "　居住エリアの広さfeet2\n",
    "'GarageCars'\n",
    "　ガレージに入る車の台数\n",
    "'GarageArea'\n",
    "　ガレージの広さfeet2\n",
    "'TotalBsmtSF'\n",
    "　敷地面積feet2\n",
    "'1stFlrSF'\n",
    "　１階の床面積feet2\n",
    "'FullBath'\n",
    "　バスルームのグレード\n",
    "'TotRmsAbvGrd'\n",
    "　バスルームを除く部屋のグレード\n",
    "'YearBuilt'\n",
    "　建築年\n",
    "'YearRemodAdd'\n",
    "　リホームした年"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "選んだ10個の特徴量の中でお互いの相関係数が高い組み合わせを3つ探し出す。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              OverallQual  GrLivArea  GarageCars  GarageArea  TotalBsmtSF  \\\n",
      "OverallQual      1.000000  -0.024136    0.250876    0.178476     0.014148   \n",
      "GrLivArea       -0.024136   1.000000   -0.243615   -0.200389    -0.070075   \n",
      "GarageCars       0.250876  -0.243615    1.000000    0.948658    -0.086902   \n",
      "GarageArea       0.178476  -0.200389    0.948658    1.000000     0.090001   \n",
      "TotalBsmtSF      0.014148  -0.070075   -0.086902    0.090001     1.000000   \n",
      "1stFlrSF        -0.152235   0.245254   -0.151426    0.038160     0.884946   \n",
      "FullBath         0.080149   0.414879   -0.176745   -0.304927    -0.526150   \n",
      "TotRmsAbvGrd    -0.180819   0.933231   -0.299984   -0.288851    -0.255605   \n",
      "YearBuilt        0.326175  -0.828125    0.292444    0.174474    -0.170933   \n",
      "YearRemodAdd     0.282906  -0.628283   -0.003113   -0.129341    -0.412951   \n",
      "\n",
      "              1stFlrSF  FullBath  TotRmsAbvGrd  YearBuilt  YearRemodAdd  \n",
      "OverallQual  -0.152235  0.080149     -0.180819   0.326175      0.282906  \n",
      "GrLivArea     0.245254  0.414879      0.933231  -0.828125     -0.628283  \n",
      "GarageCars   -0.151426 -0.176745     -0.299984   0.292444     -0.003113  \n",
      "GarageArea    0.038160 -0.304927     -0.288851   0.174474     -0.129341  \n",
      "TotalBsmtSF   0.884946 -0.526150     -0.255605  -0.170933     -0.412951  \n",
      "1stFlrSF      1.000000 -0.371868      0.069961  -0.483070     -0.629499  \n",
      "FullBath     -0.371868  1.000000      0.428268  -0.094193     -0.024329  \n",
      "TotRmsAbvGrd  0.069961  0.428268      1.000000  -0.822651     -0.598105  \n",
      "YearBuilt    -0.483070 -0.094193     -0.822651   1.000000      0.643511  \n",
      "YearRemodAdd -0.629499 -0.024329     -0.598105   0.643511      1.000000  \n"
     ]
    }
   ],
   "source": [
    "print(df_correlation10.corr(method='pearson'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "1)'GarageCars'*'GarageArea' = 0.948658\n",
    "2)'TotalBsmtSF'*'1stFlrSF' = 0.884946\n",
    "3)'GrLivArea'*'TotRmsAbvGrd' = 0.933231\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
