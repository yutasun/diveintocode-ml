{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "小麦とチェスのサンプルコード（for文）"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4マスの板に小麦を並べる（リスト）：[1, 2, 4, 8]\n"
     ]
    }
   ],
   "source": [
    "n_squares = 4\n",
    "small_board_list = [1]\n",
    "for _ in range(n_squares - 1):\n",
    "    small_board_list.append(2*small_board_list[-1])\n",
    "print(\"4マスの板に小麦を並べる（リスト）：{}\".format(small_board_list))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "小麦とチェスのサンプルコード（Numpy）"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4マスの板に小麦を並べる（ndarray）：[1 2 4 8]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "small_board_ndarray = np.array(small_board_list)\n",
    "print(\"4マスの板に小麦を並べる（ndarray）：{}\".format(small_board_ndarray))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "【問題1】2×2マスのチェス盤の小麦の数"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1 2]\n",
      " [4 8]]\n"
     ]
    }
   ],
   "source": [
    "a = np.array(small_board_list)\n",
    "b = np.reshape(a, (2,2))\n",
    "print(b)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "【問題2】n×mマスへの拡張"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[   1    2    4    8]\n",
      " [  16   32   64  128]\n",
      " [ 256  512 1024 2048]]\n"
     ]
    }
   ],
   "source": [
    "n = 3\n",
    "m = 4\n",
    "\n",
    "def chess_array(n_line,m_column):\n",
    "    board_list = [1]\n",
    "    for _ in range(n_line*m_column - 1):\n",
    "        board_list.append(2*board_list[-1])\n",
    "    import numpy as np\n",
    "    board_ndarray = np.array(board_list)\n",
    "    a = np.array(board_ndarray)\n",
    "    b = np.reshape(a, (n_line,m_column))\n",
    "    return b\n",
    "\n",
    "print(chess_array(n,m))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "【問題3】小麦の数の合計"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2.55000000e+02 6.52800000e+04 1.67116800e+07 4.27819008e+09\n",
      " 1.09521666e+12 2.80375465e+14 7.17761191e+16 1.83746865e+19]\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "n1 = 8\n",
    "m1 = 8\n",
    "#print(chess_array(n1,m1))\n",
    "amount = np.sum(chess_array(n1,m1), axis=1) # 各列の合計\n",
    "average = np.average(chess_array(n1,m1), axis = 1) # 各列の平均\n",
    "\n",
    "print(amount)\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "plt.xlabel(\"column\")\n",
    "plt.ylabel(\"number\")\n",
    "plt.title(\"number in each column\")\n",
    "plt.yscale('log') #対数グラフにする\n",
    "plt.bar(np.arange(1,9), amount)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "【問題4】小麦の数のヒートマップ"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[  1   2]\n",
      " [  4   8]\n",
      " [ 16  32]\n",
      " [ 64 128]]\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "n2 = 4\n",
    "m2 = 2\n",
    "\n",
    "print(chess_array(n2,m2))\n",
    "\n",
    "plt.xlabel(\"column\")\n",
    "plt.ylabel(\"row\")\n",
    "plt.title(\"heatmap\")\n",
    "plt.pcolor(chess_array(n2,m2))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "【問題5】後半は前半の何倍か"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[  1   2   4   8]\n",
      " [ 16  32  64 128]]\n",
      "後半は前半の16.0倍\n"
     ]
    }
   ],
   "source": [
    "n3 = 2\n",
    "m3 = 4\n",
    "\n",
    "print(chess_array(n3,m3))\n",
    "sum_array = np.sum(chess_array(n3,m3), axis=1) # 列の合計\n",
    "x = sum_array[1]/sum_array[0]\n",
    "print(\"後半は前半の{}倍\".format(x))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "【問題6】他の計算方法によるn×mマスへの拡張"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[  1   2]\n",
      " [  4   8]\n",
      " [ 16  32]\n",
      " [ 64 128]]\n",
      "[[  1   2]\n",
      " [  4   8]\n",
      " [ 16  32]\n",
      " [ 64 128]]\n"
     ]
    }
   ],
   "source": [
    "#np.append()を使用した関数\n",
    "def chess_array_np(n_line,m_column):\n",
    "    import numpy as np\n",
    "    board_list = [1]\n",
    "    for _ in range(n_line*m_column - 1):\n",
    "        board_list = np.append(board_list, 2*board_list[-1])\n",
    "    board_ndarray = np.array(board_list)\n",
    "    a = np.array(board_ndarray)\n",
    "    b = np.reshape(a, (n_line,m_column))\n",
    "    return b\n",
    "\n",
    "print(chess_array_np(4,2))\n",
    "\n",
    "#ブロードキャストを使用した関数\n",
    "\n",
    "def chess_array_bc(n_line,m_column):\n",
    "    import numpy as np\n",
    "    indices_of_squares = np.arange(n_line*m_column)\n",
    "    board_list = 2**indices_of_squares\n",
    "    board_ndarray = np.array(board_list)\n",
    "    a = np.array(board_ndarray)\n",
    "    b = np.reshape(a, (n_line,m_column))\n",
    "    return b\n",
    "\n",
    "print(chess_array_bc(4,2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "【問題7】計算時間の比較"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "for文の場合"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5.89 µs ± 14.7 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%%timeit\n",
    "n = 3\n",
    "m = 4\n",
    "def chess_array(n_line,m_column):\n",
    "    board_list = [1]\n",
    "    for _ in range(n_line*m_column - 1):\n",
    "        board_list.append(2*board_list[-1])\n",
    "    import numpy as np\n",
    "    board_ndarray = np.array(board_list)\n",
    "    a = np.array(board_ndarray)\n",
    "    b = np.reshape(a, (n_line,m_column))\n",
    "    return b\n",
    "chess_array(n,m)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "np.append()文の場合"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "82 µs ± 1.09 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%%timeit\n",
    "n = 3\n",
    "m = 4\n",
    "def chess_array_np(n_line,m_column):\n",
    "    import numpy as np\n",
    "    board_list = [1]\n",
    "    for _ in range(n_line*m_column - 1):\n",
    "        board_list = np.append(board_list, 2*board_list[-1])\n",
    "    board_ndarray = np.array(board_list)\n",
    "    a = np.array(board_ndarray)\n",
    "    b = np.reshape(a, (n_line,m_column))\n",
    "    return b\n",
    "chess_array_np(n,m)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "ブロードキャスト文"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5.26 µs ± 56.1 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%%timeit\n",
    "n = 3\n",
    "m = 4\n",
    "def chess_array_bc(n_line,m_column):\n",
    "    import numpy as np\n",
    "    indices_of_squares = np.arange(n_line*m_column)\n",
    "    board_list = 2**indices_of_squares\n",
    "    board_ndarray = np.array(board_list)\n",
    "    a = np.array(board_ndarray)\n",
    "    b = np.reshape(a, (n_line,m_column))\n",
    "    return b\n",
    "chess_array_bc(4,2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "考察"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "計測結果としてはブロードキャスト、for文、np.append()の順に計算速度が速かった。\n",
    "np.append()については要素を追加するたびに直前のデータを読み出すため時間がかかっているものと思われる。\n",
    "次にブロードキャストにおいてはリストの読み出しがなく、与えられら等差数列の各要素を単純計算して求められるため計算時間が短く抑えられたものと推測する。"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
